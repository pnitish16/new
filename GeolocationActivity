package in.co.unionbankofindia.unionbankrecovery.ui;

import android.content.Context;
import android.location.Location;
import android.os.AsyncTask;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.text.TextUtils;
import android.text.format.Time;
import android.util.Log;
import android.view.View;
import android.widget.ProgressBar;
import android.widget.Toast;

import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import in.co.unionbankofindia.unionbankrecovery.R;
import in.co.unionbankofindia.unionbankrecovery.model.Customer;
import in.co.unionbankofindia.unionbankrecovery.model.GeoData;
import in.co.unionbankofindia.unionbankrecovery.utils.AppConstants;
import in.co.unionbankofindia.unionbankrecovery.utils.CommonCode;
import in.co.unionbankofindia.unionbankrecovery.utils.GPSTracker;
import in.co.unionbankofindia.unionbankrecovery.utils.SessionData;

public class GeolocationActivity extends AppCompatActivity implements OnMapReadyCallback {

    private String location;
    private String lat, lon;
    private CommonCode commonCode;
    private SessionData sessionData;
    private Context context;
    private ProgressBar progressBar;
    private List<GeoData> geoDatas;
    private ArrayList<MarkerOptions> markers;
    private HashMap<Marker, GeoData> markermap;
    private MarkerOptions marker;
    private GoogleMap mMap;
    private Marker mapmarker;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_geolocation);

        context = GeolocationActivity.this;
        sessionData = new SessionData(context);
        commonCode = new CommonCode(context);

        if (getIntent().getExtras() != null) {
            location = getIntent().getStringExtra("location");
            Log.d("location", location);

            lat = location.split(",")[0];
            lon = location.split(",")[1];
        }

        if (commonCode.checkInternet()) {
            new SearchGeoData().execute();
        } else {
            commonCode.showNoInternetConnection();
        }


    }

    // Include the OnCreate() method here too, as described above.
    @Override
    public void onMapReady(GoogleMap googleMap) {
        // Add a marker in Sydney, Australia,
        // and move the map's camera to the same location.

        mMap = googleMap;
        LatLng sydney = new LatLng(Double.parseDouble(lat), Double.parseDouble(lon));
        googleMap.addMarker(new MarkerOptions().position(sydney)
                .title("Marker in Sydney"));
        googleMap.moveCamera(CameraUpdateFactory.newLatLng(sydney));
    }


    class SearchGeoData extends AsyncTask<String, Void, String> {

        @Override
        protected void onPreExecute() {
            progressBar = new ProgressBar(context);
            super.onPreExecute();
        }

        @Override
        protected String doInBackground(String... strings) {

            String url = AppConstants.webservice_url + "api_search_latlong.php";

            String responsestr = "";
            HttpClient client = new DefaultHttpClient();
            HttpPost post = new HttpPost(url);

            // add header
//            post.setHeader("User-Agent", USER_AGENT);
            List<NameValuePair> urlParameters = new ArrayList<NameValuePair>();

            JSONObject jsonObject = new JSONObject();
            try {
                jsonObject.put("radius", "10");
                jsonObject.put("agent_lat", lat);
                jsonObject.put("agent_long", lon);
            } catch (JSONException e) {
                e.printStackTrace();
            }

            urlParameters.add(new BasicNameValuePair("action", "get_agent_info"));
            urlParameters.add(new BasicNameValuePair("data", jsonObject.toString()));

            try {
                post.setEntity(new UrlEncodedFormEntity(urlParameters));

                HttpResponse response = client.execute(post);
                System.out.println("\nSending 'POST' request to URL : " + url);
                System.out.println("Post parameters : " + post.getEntity());
                System.out.println("Response Code : " +
                        response.getStatusLine().getStatusCode());

                BufferedReader rd = new BufferedReader(
                        new InputStreamReader(response.getEntity().getContent()));

                StringBuffer result = new StringBuffer();
                String line = "";
                while ((line = rd.readLine()) != null) {
                    result.append(line);
                }
                responsestr = result.toString();
                Log.d("Datasync", responsestr);
                System.out.println(result.toString());

            } catch (IOException e) {
                e.printStackTrace();
            }
            Log.d("Response", responsestr);
            return responsestr;
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);
            progressBar.setVisibility(View.GONE);

            try {
                JSONObject jsonObject = new JSONObject(s);

                if (jsonObject.optString("status").equals("1")) {
                    Toast.makeText(context, "Geo Tag Added", Toast.LENGTH_SHORT).show();
                    finish();

                    Gson gson = new Gson();
                    geoDatas = gson.fromJson(jsonObject.optJSONArray("result").toString(), new TypeToken<List<Customer>>() {
                    }.getType());
                    for (int i = 0; i < 5; i++) {
                        GeoData geoData = new GeoData("", "", "", "", "-33.852", "151.211", "", "", "");
                        geoDatas.add(geoData);
                    }

                    plotMarkers(geoDatas);
                }

            } catch (JSONException e) {
                e.printStackTrace();
            }
        }
    }

    private void plotMarkers(List<GeoData> geoDatas) {
        putMarkers();
    }

    private void putMarkers() {

        markers = new ArrayList<MarkerOptions>();

        //setting up the markers on the map
        markermap = new HashMap<Marker, GeoData>();

        //Adding Point of interest items
        for (int i = 0; i < geoDatas.size(); i++) {
            GeoData data = geoDatas.get(i);
            marker = new MarkerOptions().position(new LatLng(Double.parseDouble(data.getBorrowerLat()), Double.parseDouble(data.getBorrowerLong()))).title(data.getId());
            marker.icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_RED));
//            googleMap.addMarker(marker);

            //Marker addition
            mapmarker = placeMarker(data);
            markermap.put(mapmarker, data);
            markers.add(marker);
        }

        //Current Location
        LatLng currentLatLng = CommonCode.getCurrentLatLong(context);
        Location current = new Location("mylocation");
        current.setLatitude(currentLatLng.latitude);
        current.setLongitude(currentLatLng.longitude);
    }


    public Marker placeMarker(GeoData pointItem) {
        Marker marker = mMap.addMarker(
                new MarkerOptions()
                        .position(new LatLng(Double.parseDouble(pointItem.getBorrowerLat()), Double.parseDouble(pointItem.getBorrowerLong())))
                        .title(pointItem.getId())
                        .icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_RED))
                        .snippet(pointItem.getId()));
        return marker;
    }
}
